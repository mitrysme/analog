Imports System.Net.NetworkInformation
Imports System.Threading

Public Class cAsyncPinger
    Private _stationName As String
    Private _tmr As Timers.Timer
    Private _pingSender As Ping
    Private _timeout As Integer
    Private _sent As Integer = 0
    Private _lost As Integer = 0
    Private _averageRoundtrip As Integer = 0
    Private _aRoundTrip As New List(Of Integer)
    Private _lastFivePings As New List(Of Boolean)
    Private _buffer() As Byte
    Private _deg As [Delegate]
    Private _control As Control ' frmMain.lvping
    Private _lock As New Object
    Private _canceled As Boolean = False

    Public Const MAX_LV_PING_HISTORY As UShort = 3600 ' 1 heure histo dans frmmain.lvping

    Public Sub New(ByVal stationName As String, _
                   ByRef control As Control, _
                   ByRef deg As [Delegate], _
                   Optional ByVal intPingBufferLength As Integer = 32)

        _tmr = New Timers.Timer(1000) ' ping toutes les secondes
        _tmr.AutoReset = False
        _stationName = stationName
        _pingSender = New Ping
        _timeout = 4000
        _control = control
        _deg = deg

        _buffer = getBufferData(intPingBufferLength)
    End Sub

    Public Structure pingResults
        Public text As String
        Public sent As Integer
        Public lost As Integer
        Public lostPercentage As Double ' pourcentage de perte de paquets
        Private _avgRoundtripTime As Double
        Private _maxRoundtrip As Double
        Private _minRoundtrip As Double

        Public Property avgRoundtripTime() As Double
            Get
                If _avgRoundtripTime <= 0 Then
                    Return 1
                Else
                    Return _avgRoundtripTime
                End If
            End Get
            Set(ByVal value As Double)
                _avgRoundtripTime = value
            End Set
        End Property
        Public Property maxRoundtrip() As Double
            Get
                If _maxRoundtrip <= 0 Then
                    Return 1
                Else
                    Return _maxRoundtrip
                End If
            End Get
            Set(ByVal value As Double)
                _maxRoundtrip = value
            End Set
        End Property
        Public Property minRoundTrip() As Double
            Get
                If _minRoundtrip <= 0 Then
                    Return 1
                Else
                    Return _minRoundtrip
                End If
            End Get
            Set(ByVal value As Double)
                _minRoundtrip = value
            End Set
        End Property
    End Structure

    Public Sub startPing()
        _tmr.Start()

        AddHandler _tmr.Elapsed, AddressOf pingAsync
        AddHandler _pingSender.PingCompleted, AddressOf pingCompletedCallback
    End Sub

    Public Sub pingAsync(ByVal sender As Object, ByVal e As System.EventArgs)
        _pingSender.SendAsync(_stationName, _timeout, _buffer, New Object)
    End Sub

    Private Sub pingCompletedCallback(ByVal sender As Object, ByVal e As PingCompletedEventArgs)
        Static pingresults As New pingResults
        Dim text As String = String.Empty
        Dim pingReply As PingReply

        _sent += 1

        If e.Reply Is Nothing Then
            _lost += 1
            text = e.Error.InnerException.Message
        Else
            pingReply = e.Reply

            If Not pingReply.Status = IPStatus.Success Then
                _lost += 1
                updateLastFivePings(False)
                text = pingReply.Status.ToString
            Else
                updateLastFivePings(True)
                _aRoundTrip.Add(CInt(pingReply.RoundtripTime))

                Dim roundTrip As String = pingReply.RoundtripTime.ToString
                If roundTrip = "0" Then roundTrip = "<1"

                text = String.Format("réponse de {0} : octets {1} {2} {3} ms", pingReply.Address.ToString, pingReply.Buffer.Count, pingReply.Status.ToString, roundTrip)
            End If
        End If

        With pingresults
            .text = text
            .sent = _sent
            .lost = _lost
            .avgRoundtripTime = getRoundtripTimeAvg()
            .maxRoundtrip = getMaxRoundTrip()
            .minRoundTrip = getMinRoundtrip()
            .lostPercentage = getLostPercentage()
        End With

        SyncLock _lock
            If _control.IsHandleCreated And Not _control.Disposing And Not _canceled Then
                Try
                    _control.BeginInvoke(_deg, pingresults) ' deadlock si invoke ...
                Catch ex As Exception
                    Debug.Print("exception invoke ping")
                End Try

                _tmr.Start()
            Else
                Debug.Print("Ping : invoke impossible => handle du controle non créé .... ")
            End If
        End SyncLock
    End Sub

    Private Function getBufferData(ByVal intBufferLength As Integer) As Byte()
        Dim sBuffer As String = Analog.functions.misc.CreateAleatoire(intBufferLength)

        Return System.Text.Encoding.ASCII.GetBytes(sBuffer)
    End Function

    Public Sub changeBufferSize(ByVal intBufferSize As Integer)
        _buffer = getBufferData(intBufferSize)
    End Sub


    Private Function getRoundtripTimeAvg() As Double
        Dim totalRoundtripTime As Long = 0
        For Each roundtripValue As Long In _aRoundTrip
            totalRoundtripTime += roundtripValue
        Next

        Return totalRoundtripTime / _aRoundTrip.Count
    End Function

    Private Sub updateLastFivePings(ByVal val As Boolean)
        SyncLock (_lastFivePings)
            If _lastFivePings.Count > 4 Then
                _lastFivePings.RemoveAt(0)
            End If

            _lastFivePings.Add(val)
        End SyncLock
    End Sub

    ''' <summary>
    ''' Retourne délai ping mini dans collection
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>
    ''' lock car collection peut être effacée par méthode stopPing appelée depuis thread UI ( race )
    ''' </remarks>
    Private Function getMinRoundtrip() As Long
        If _aRoundTrip.Count > 0 Then
            Return _aRoundTrip.Min
        Else
            Return 0
        End If
    End Function

    ''' <summary>
    ''' Retourne délai ping max dans collection
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks>
    ''' </remarks>
    Private Function getMaxRoundTrip() As Long
        If _aRoundTrip.Count > 0 Then
            Return _aRoundTrip.Max
        Else
            Return 0
        End If
    End Function

    Private Function getLostPercentage() As Double
        If Not _sent = 0 Or _lost = 0 Then
            Return (_lost * 100) / (_sent + _lost)
        Else
            Return 0
        End If
    End Function

    ''' <summary>
    ''' Retourne vrai si les 5 derniers pings sont OK
    ''' </summary>
    ''' <returns>boolean</returns>
    ''' <remarks>
    ''' </remarks>
    Public Function isPingOk() As Boolean
        SyncLock _lastFivePings
            For Each Val As Boolean In _lastFivePings
                If Not Val Then Return False
            Next
        End SyncLock

        Return True
    End Function


    Public Sub stopPing()
        RemoveHandler _pingSender.PingCompleted, AddressOf pingCompletedCallback
        RemoveHandler _tmr.Elapsed, AddressOf pingAsync

        SyncLock _lock
            _canceled = True

            With _tmr
                .Stop()
                .Enabled = False
                .Dispose()
            End With

            _pingSender.SendAsyncCancel()
            '
            ' a priori probleme de leak si on fait simplement ping.dispose()
            ' voir http://blogs.msdn.com/b/joncole/archive/2005/12/15/debugging-a-memory-leak-in-managed-code_3a00_-ping-_2d00_-sendasync.aspx
            '
            CType(_pingSender, IDisposable).Dispose()

            _deg = Nothing
            _control = Nothing
        End SyncLock

        SyncLock (_aRoundTrip)
            _aRoundTrip.Clear()
        End SyncLock
    End Sub

    Public Sub resetPingData()
        _sent = 0
        _lost = 0
        _averageRoundtrip = 0

        SyncLock _aRoundTrip
            _aRoundTrip.Clear()
        End SyncLock
        SyncLock _lastFivePings
            _lastFivePings.Clear()
        End SyncLock
    End Sub

    Public Function getPingReport() As String
        Dim txt As String = String.Empty

        txt += String.Format("Statistiques ping pour hôte   : {0}", _stationName) & vbNewLine
        txt += String.Format("Paquets envoyés               : {0}", _sent) & vbNewLine
        txt += String.Format("Paquets perdus                : {0}", _lost) & vbNewLine
        txt += String.Format("Temps de réponse Max          : {0} ms", getMaxRoundTrip.ToString) & vbNewLine
        txt += String.Format("Temps de réponse Min          : {0} ms", getMinRoundtrip.ToString) & vbNewLine
        txt += String.Format("Temps de réponse Moyen        : {0} ms", CInt(getRoundtripTimeAvg()).ToString) & vbNewLine
        txt += String.Format("Pourcentage de perte          : {0} %", getLostPercentage) ' format => double genre 10 chiffres après la virgule => 1 chiffre suffirait ....

        Return txt
    End Function


End Class
